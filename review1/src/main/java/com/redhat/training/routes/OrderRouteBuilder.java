package com.redhat.training.routes;

import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.converter.jaxb.JaxbDataFormat;
import org.apache.camel.model.dataformat.BindyType;

import com.redhat.training.beans.BatchOrderAggregationStrategy;
import com.redhat.training.model.Order;

public class OrderRouteBuilder extends RouteBuilder {

	@Override
	public void configure() throws Exception {
		JaxbDataFormat df = new JaxbDataFormat("com.redhat.training.model");
		
		// read classes from the com.redhat.training.model package for JAXB
		from("file:/tmp/data/orders1?include=orders-v1-.*.csv")
		.routeId("OrderRoute1")
		.threads(5)
		.to("direct:process");
		
		from("file:/tmp/data/orders2?include=orders-v1-.*.csv")
		.routeId("OrderRoute2")
		.threads(5)
		.to("direct:process");
		
		
		//TODO Read only orders with the following file name: orders-v1-.*.csv"

		from("direct:process")
			.routeId("CommonProcessing")
			.onCompletion()
			.bean("performance", "stop")
			.end()
			.process("assignBatch")
			.bean("performance", "start")
			.log("Processing file: ${header.CamelFileName} in Batch ${header.batchNumber}")
			.unmarshal().bindy(BindyType.Csv,Order.class)
			.split(body()).streaming()
			.bean("order")
			.wireTap("seda:audit")
			.marshal(df)
			.to("file:/tmp/orders?fileName=order-${bean:order.generateRandomFileName}.xml");
			
		
			
		
		from("seda:audit")
			.routeId("Audit")
			.aggregate(header("batchNumber"), new BatchOrderAggregationStrategy())
				.completionTimeout(2000)
			.bean("batch")
			
			//TODO Aggregate orders based on the batchNumber that was provided by the assignBatch processor
			//TODO aggregate all the order after two seconds.
			//TODO update the file name that will be generated by this aggregation
			.choice()
				.when(xpath("number(/batch/@total) > 100"))
				.to("file:/tmp/audit/large")
				//TODO if the total batch is over US$ 100 than save to /tmp/audit/large
				.otherwise()
				.to("file:/tmp/audit/small")
				//TODO if the total batch is under US$ 100 than save to /tmp/audit/small
			.end()
			;
	}

}
